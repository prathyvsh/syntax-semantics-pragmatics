* Syntax, Semantics, Pragmatics

A collection of notes and resources on understanding language theory.

* Syntax

* Semantics

** Surveys

*** [[http://aleteya.cs.buap.mx/~jlavalle/flp/understanding-programming-languages.pdf][Understanding Programming Languages]]
Read (7 September 2020)

The paper describes the Formalist vs. Platonic divide in the semantic studies that emerged in the 1960s.
Author qualifies operational semantics as mapping one language to another with its execution mapped to reduction/evaluation in the mapped language. One prominent example is the use of Lambda Calculus abstraction/application used to map to functional procedures and calls.

This is contrasted with Denotational Semantics which maps to mathematical entities that exists outside the language. One of Dana Scott’s criticism of Operational Semantics was that the untyped nature of Lambda Calculus showed that there wasn’t a way to identify it with mathematical objects.

*** The Definition of Programming Languages
A.D. McGettrick

A survey of formal aspect of programming languages with details on semantics.

** Operational Semantics

Landin’s work on interpreting the semantic content of programming languages as mapping to Lambda Calculus marks the beginning of work on operational semantics. He created the SECD system in his paper called Mechanical Evaluation of Expressions which lead to quite a few follow up work in the field.

** [[https://archive.is/e4xeZ][The mechanical evaluation of expressions]]
*** Peter Landin, 1964

** [[https://web.eecs.umich.edu/~weimerw/2006-615/reading/plotkin81structural.pdf][A Structural Approach to Operational Semantics]]
*** Gordon Plotkin (1981)

** A natural deduction treatment of operational semantics
Burstall and Honsell (1988)

** Denotational Semantics

*** [[https://link.springer.com/chapter/10.1007/978-1-4612-4118-8_3][The Varieties of programming languages]]
Christopher Strachey

There also seems to be a [[https://link.springer.com/content/pdf/10.1007/3-540-50939-9_121.pdf][Hoare version]] with same title.

*** A Theory of programming Language Semantics
Robin Milne and Christopher Strachey

*** Denotational Semantics: The Scott-Strachey Approach to programming Language Theory
 
*** Fundamental Concepts in Programming Languages
Christopher Strachey

The famous paper that introduce L-values, R-values, and brought much needed conceptual clarity to the field.

*** [[https://www.cs.cmu.edu/~kw/scans/scott93tcs.pdf][A Type Theoretical Alternative to ISWIM, CUCH, OWHY]]
Dana Scott (1993)

*** Definitional interpreters for higher-order programming languages (1998)
John Reynolds

*** [[https://homepages.inf.ed.ac.uk/gdp/publications/cbn_cbv_lambda.pdf][Call by Name, Call by Value, and the Lambda Calculus]]
Gordon Plotkin, 1974

An [[https://www.ccs.neu.edu/home/types/resources/notes/call-by-name-call-by-value/extended-intro.pdf][intro]] to the work by Ben Greenman. 

** To describe

*** Fix point operators
*** Confluence / Church–Rosser Property
*** Full abstraction
 
** Category Theoretic Semantics
 
*** Computational Category Theory
Rydeheard and Burstall
 
** Axiomatic Semantics
 
*** [[https://archive.is/5XxJ0][An axiomatic basis for computer programming]]
C.A.R Hoare

* Pragmatics
