* Syntax, Semantics, Pragmatics

A collection of notes and resources on understanding language theory.

* Syntax

* Semantics

Some key figures of this field are Dana Scott, Christopher Strachey, Peter Landin, John McCarthy, Gordon Plotkin, John Reynolds.

** Surveys

*** [[http://aleteya.cs.buap.mx/~jlavalle/flp/understanding-programming-languages.pdf][Understanding Programming Languages]]
Read (8 September 2020)

The paper describes formalist vs. platonic divide in the semantic studies that emerged in the 1960s.
Author qualifies initial instance of operational semantics as mapping one language to another with its execution mapped to reduction/evaluation in the mapped language. One prominent example is the use of Lambda Calculus abstraction/application used to map to functional procedures and calls in programming languages.

This is contrasted with denotational semantics which maps to mathematical entities that exists outside the language. One of Dana Scott’s criticism of operational semantics was that the untyped Lambda Calculus didn’t have a way to identify it’s structures with mathematical objects.

The essential tension of how formalism entails an infinite regress of formal languages and platonism leads to an axiomatic system that maps to mathematical objects is described. There’s a survey of literature that questions the epistemological viewpoint of Platonism. But the author comes to view that if formal languages can be thought of as games whose rules we follow, there is no account of how such an invented system can be applicable to reality. Also, this view of non-conformance would mean that it is not a theory of meaning (semantics) anymore but only a tower of syntax with no mapping to an outside reality.

The paper concludes by outlining that the tension still exist when study of semantics is situated in the general philosophical setting. Both the formalist/platonic positions can be seen to apply to either semantics as the ultimate meaning of these semantics is a philosophical question. The paper describes a Wittgensteinian view towards the end that the form of life / community of practice constituted by appropriate training determines the meaning of programming language in its use.

*** The Definition of Programming Languages
A.D. McGettrick

A survey of formal aspect of programming languages with details on semantics.

*** [[https://archive.is/FY1Hu][A Mathematical Theory of Computation?]]
Simone Martini (2017)

*** [[http://www.cs.unibo.it/~martini/papers-to-ftp/AMTC.pdf][The standard model for programming languages: The birth of a mathematical theory of computation]]
Simone Martini (2020)

** Operational Semantics

Landin’s work on interpreting the semantic content of programming languages as mapping to Lambda Calculus marks the beginning of work on operational semantics. He created the SECD system in his paper called Mechanical Evaluation of Expressions which lead to quite a few follow up work in the field.

** [[https://archive.is/e4xeZ][The mechanical evaluation of expressions]]
*** Peter Landin, 1964

** [[https://web.eecs.umich.edu/~weimerw/2006-615/reading/plotkin81structural.pdf][A Structural Approach to Operational Semantics]]
*** Gordon Plotkin (1981)

** A natural deduction treatment of operational semantics
Burstall and Honsell (1988)

** Denotational Semantics

*** [[https://link.springer.com/chapter/10.1007/978-1-4612-4118-8_3][The Varieties of programming languages]]
Christopher Strachey

There also seems to be a [[https://link.springer.com/content/pdf/10.1007/3-540-50939-9_121.pdf][Hoare version]] with same title.

*** A Theory of programming Language Semantics
Robin Milne and Christopher Strachey

*** Denotational Semantics: The Scott-Strachey Approach to programming Language Theory
 
*** Fundamental Concepts in Programming Languages
Christopher Strachey

The famous paper that introduce L-values, R-values, and brought much needed conceptual clarity to the field.

*** [[https://www.cs.cmu.edu/~kw/scans/scott93tcs.pdf][A Type Theoretical Alternative to ISWIM, CUCH, OWHY]]
Dana Scott (1993)

*** Definitional interpreters for higher-order programming languages (1998)
John Reynolds

*** [[https://homepages.inf.ed.ac.uk/gdp/publications/cbn_cbv_lambda.pdf][Call by Name, Call by Value, and the Lambda Calculus]]
Gordon Plotkin, 1974

An [[https://www.ccs.neu.edu/home/types/resources/notes/call-by-name-call-by-value/extended-intro.pdf][intro]] to the work by Ben Greenman.

*** Towards a formal semantics
Christopher Strachey (1966)

*** [[https://ropas.snu.ac.kr/~kwang/520/readings/sco70.pdf][Outline of a mathematical theory of computation]]
Dana Scott
https://pllab.github.io/plrg/posts/2017-08-10-outline-mathematical-theory-computation.html

** To describe

*** Fix point operators
*** Confluence / Church–Rosser Property
*** Full abstraction
 
** Category Theoretic Semantics
 
*** Computational Category Theory
Rydeheard and Burstall
 
** Axiomatic Semantics
 
*** [[https://archive.is/5XxJ0][An axiomatic basis for computer programming]]
C.A.R Hoare

* Pragmatics
